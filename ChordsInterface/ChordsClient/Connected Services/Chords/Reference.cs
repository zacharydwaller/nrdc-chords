//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChordsClient.Chords {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Chords.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSites", ReplyAction="http://tempuri.org/IService/GetSitesResponse")]
        string GetSites();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSites", ReplyAction="http://tempuri.org/IService/GetSitesResponse")]
        System.Threading.Tasks.Task<string> GetSitesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSite", ReplyAction="http://tempuri.org/IService/GetSiteResponse")]
        string GetSite(int siteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSite", ReplyAction="http://tempuri.org/IService/GetSiteResponse")]
        System.Threading.Tasks.Task<string> GetSiteAsync(int siteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMeasurements", ReplyAction="http://tempuri.org/IService/GetMeasurementsResponse")]
        string GetMeasurements(int siteID, int streamIndex, int hoursBack);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetMeasurements", ReplyAction="http://tempuri.org/IService/GetMeasurementsResponse")]
        System.Threading.Tasks.Task<string> GetMeasurementsAsync(int siteID, int streamIndex, int hoursBack);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMeasurement", ReplyAction="http://tempuri.org/IService/CreateMeasurementResponse")]
        string CreateMeasurement(ChordsInterface.Chords.Measurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateMeasurement", ReplyAction="http://tempuri.org/IService/CreateMeasurementResponse")]
        System.Threading.Tasks.Task<string> CreateMeasurementAsync(ChordsInterface.Chords.Measurement measurement);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ChordsClient.Chords.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ChordsClient.Chords.IService>, ChordsClient.Chords.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetSites() {
            return base.Channel.GetSites();
        }
        
        public System.Threading.Tasks.Task<string> GetSitesAsync() {
            return base.Channel.GetSitesAsync();
        }
        
        public string GetSite(int siteID) {
            return base.Channel.GetSite(siteID);
        }
        
        public System.Threading.Tasks.Task<string> GetSiteAsync(int siteID) {
            return base.Channel.GetSiteAsync(siteID);
        }
        
        public string GetMeasurements(int siteID, int streamIndex, int hoursBack) {
            return base.Channel.GetMeasurements(siteID, streamIndex, hoursBack);
        }
        
        public System.Threading.Tasks.Task<string> GetMeasurementsAsync(int siteID, int streamIndex, int hoursBack) {
            return base.Channel.GetMeasurementsAsync(siteID, streamIndex, hoursBack);
        }
        
        public string CreateMeasurement(ChordsInterface.Chords.Measurement measurement) {
            return base.Channel.CreateMeasurement(measurement);
        }
        
        public System.Threading.Tasks.Task<string> CreateMeasurementAsync(ChordsInterface.Chords.Measurement measurement) {
            return base.Channel.CreateMeasurementAsync(measurement);
        }
    }
}
